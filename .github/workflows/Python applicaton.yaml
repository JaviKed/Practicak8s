name: Python application

on:
  workflow_dispatch:
    

  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test:
    name: app tests
    needs: lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip cache purge
        pip install Werkzeug==2.3.3
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest --maxfail=3 --disable-warnings
    - name: Test coverage for /health
      run: |
        python -m unittest discover -s tests -p 'app_test.py'
  build_and_push_image:

    name: build y push de la imagen
    needs: test
    runs-on: ubuntu-latest
    

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker credentials
      uses: docker/login-action@v2
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}

    - name: Build Docker image
      run: |
        docker build -t xkedara/app-image:latest .  # Replace with your Docker Hub username and image name

    - name: Push Docker image
      run: |
        docker push xkedara/app-image:latest  # Push to your Docker Hub repo

  deployment:

    name: Deploy de la version de la app
    needs: build_and_push_image
    runs-on: ubuntu-latest
    

    steps:
    - run: echo "Acceder a la carpeta de app-k8s y ejecutar uno de los 2 scripts de deployment gb-deployment.sh o canary-deployment.sh"
    - run: echo "Esto proceder√° a levantar la nueva version de nuestra app ya que se ha subido la imagen al registry de dockerHub y ha pasado los tests"

      